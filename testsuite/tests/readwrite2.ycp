/**
 * Module:
 *   NFS client configuration
 *
 * Summary:
 *   Testsuite
 *
 * Authors:
 *   Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 */
{
    // testedfiles: Nfs.ycp Service.ycp Report.ycp Testsuite.ycp

    include "testsuite.ycp";

    map I_READ = $[
	"target" : $[
	    "size" : 0,
	],
    ];
    map I_WRITE = $[];
    map I_EXEC = $[
	"target" : $[
	    "bash_output" : $[],
	],
    ];
    TESTSUITE_INIT ([I_READ, I_WRITE, I_EXEC], nil);

    import "Nfs";
    import "Report";
    import "Progress";

    boolean progress_orig = Progress::set (false);
    Report::DisplayErrors (false, 0);

    map service_on = $[
	"start": [ "3", "5"],
	"stop":	 [ "3", "5"],
	];
    map service_off = $[
	"start": [],
	"stop":	 [],
	];
    map READ = $[
	// Runlevel:
	"init": $[
	    "scripts": $[
		"exists": true,
		"runlevel": $[
		    "portmap": service_on,
		    "nfs": service_on,
		    ],
		// their contents is not important for ServiceAdjust
		"comment": $[
		    "portmap": $[],
		    "nfs": $[],
		    ],
		],
	    ],
    /*
	// targetpkg:
	"targetpkg": $[
	    // autofs
	    "installed": true,
	    ],
    */
	// Nis itself:
	"etc": $[
	    "fstab": [
		$[
		    "file":"/",
		    "freq":1,
		    "mntops":"defaults",
		    "passno":2,
		    "spec":"/dev/hda6",
		    "vfstype":"reiserfs",
		],
		$[
		    "file":"/home",
		    "freq":0,
		    "mntops":"defaults",
		    "passno":0,
		    "spec":"foo.bar.com:/home",
		    "vfstype":"nfs",
		],
		$[
		    "file":"/var/spool/mail",
		    "freq":0,
		    "mntops":"defaults",
		    "passno":0,
		    "spec":"foo.bar.com:/var/spool/mail",
		    "vfstype":"nfs",
		],
		$[
		    "file":"/a\\040space",
		    "freq":1,
		    "mntops":"defaults",
		    "passno":3,
		    "spec":"/dev/hda7",
		    "vfstype":"reiserfs",
		],
		$[
		    "file":"/b\\040space",
		    "freq":0,
		    "mntops":"defaults",
		    "passno":0,
		    "spec":"foo.bar.com:/space\\040dir",
		    "vfstype":"nfs",
		],
	      ],
	      "idmapd_conf" : "localhost"
	    ],
	"sysconfig": $[
	     "nfs" : $[
	         "NFS4_SUPPORT": "no",
                 "NFS_SECURITY_GSS": "no",
	     ],
	 ],
	];

    // services portmap & nfs are stopped.
    map READ3 = (map) eval (READ);
    READ3["init","scripts","runlevel","portmap"] = service_off;
    READ3["init","scripts","runlevel","nfs"]     = service_off;

    // no nfs file-systems in /etc/fstab
    map EMPTY = (map) eval (READ);
    EMPTY["etc","fstab"] = [
	$[
	    "file":"/",
	    "freq":1,
	    "mntops":"defaults",
	    "passno":2,
	    "spec":"/dev/hda6",
	    "vfstype":"ext3",
	],
    ];

    // services portmap & nfs are stopped; and /etc/fstab contains no nfs imports
    map EMPTY3 = (map) eval (READ3);
    EMPTY3["etc","fstab"] = [
	$[
	    "file":"/",
	    "freq":1,
	    "mntops":"defaults",
	    "passno":2,
	    "spec":"/dev/hda6",
	    "vfstype":"ext3",
	],
    ];

    map WRITE = $[
	];

    map WRITE_KO = $[
	"etc": $[
	    "fstab": false,
	    ],
	];

    map EXECUTE = $[
	"target": $[
	    "bash_output": $[
		"exit": 0,
		"stdout": "",
		"stderr": "",
		],
	    "mkdir": true,
	    ],
	];

    // fstab contains nfs mounts & services are running
    DUMP ("\nRead  - nfs is in use & running\n");
    TEST (``(Nfs::Read ()), [READ, WRITE, EXECUTE], nil);
    // fstab unchanged
    DUMP ("\nWrite - nfs is in use - start services\n");
    TEST (``(Nfs::Write ()), [READ, WRITE, EXECUTE], nil);

    // fstab contains nfs mounts & services are stopped:-(
    DUMP ("\nRead  - nfs is in use & stopped\n");
    TEST (``(Nfs::Read ()), [READ3, WRITE, EXECUTE], nil);
    // fstab unchanged - so, start services
    DUMP ("\nWrite - nfs is in use - so, sart services\n");
    TEST (``(Nfs::Write ()), [READ3, WRITE, EXECUTE], nil);

    // fstab contains no nfs mounts, services are running
    DUMP ("\nRead  - nfs not used & running\n");
    TEST (``(Nfs::Read ()), [EMPTY, WRITE, EXECUTE], nil);
    // fstab unchanged - so, STOP services
    DUMP ("\nWrite - nfs not used - so, stopping services\n");
    TEST (``(Nfs::Write ()), [EMPTY, WRITE, EXECUTE], nil);

    // fstab contains no nfs mount, serives are stopped
    DUMP ("\nRead  - nfs not used & services are stopped\n");
    TEST (``(Nfs::Read ()), [EMPTY3, WRITE, EXECUTE], nil);
    // fstab unchanged - so, leave services stopped
    DUMP ("\nWrite - nfs not used; leave services stopped\n");
    TEST (``(Nfs::Write ()), [EMPTY3, WRITE, EXECUTE], nil);

/*    // nfs and portmap are running
    DUMP ("\nRead  - services are running\n");
    TEST (``(Nfs::Read ()), [READ, WRITE, EXECUTE], nil);
    DUMP ("\nWrite - services will be stopped\n");
    // Stop services!
//    Nfs::start = false;
    // And Write
    TEST (``(Nfs::Write ()), [READ, WRITE, EXECUTE], nil);

    // nfs and portmap are running
    DUMP ("\nRead  - services are running\n");
    TEST (``(Nfs::Read ()), [READ, WRITE, EXECUTE], nil);
    DUMP ("\nWrite - services are running\n");
    // Start services (nfsserver)
//    Nfs::start = true;
    // And Write
    TEST (``(Nfs::Write ()), [READ, WRITE, EXECUTE], nil);

    // nfs and portmap are stopped
    DUMP ("\nRead  - services are stopped\n");
    TEST (``(Nfs::Read ()), [READ3, WRITE, EXECUTE], nil);
    DUMP ("\nWrite - services will be stopped\n");
    // Leave services stopped
//    Nfs::start = false;
    // And Write
    TEST (``(Nfs::Write ()), [READ3, WRITE, EXECUTE], nil);

    // nfs and portmap are stopped
    DUMP ("\nRead  - services are stopped\n");
    TEST (``(Nfs::Read ()), [READ3, WRITE, EXECUTE], nil);
    DUMP ("\nWrite - services will be started\n");
    // Start services
//    Nfs::start = true;
    // And Write
    TEST (``(Nfs::Write ()), [READ3, WRITE, EXECUTE], nil);

    DUMP ("\nEMPTY\n");
    TEST (``(Nfs::Read ()), [EMPTY, WRITE, EXECUTE], nil);
    TEST (``(Nfs::Write ()), [EMPTY, WRITE, EXECUTE], nil);*/
}
