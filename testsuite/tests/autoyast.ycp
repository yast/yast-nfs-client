{
    include "testsuite.ycp";
    map I_READ = $[
	"target" : $[
	    "tmpdir" : "/tmp",
	],
    ];
    map I_WRITE = $[];
    map I_EXEC = $[];
    TESTSUITE_INIT ([I_READ, I_WRITE, I_EXEC], nil);

    map READ = $[
        "etc": $[
            "idmapd_conf" : "localdomain",
        ],
        "sysconfig": $[
             "nfs" : $[
                 "NFS4_SUPPORT": "no",
                 "NFS_SECURITY_GSS": "no",
             ],
         ],
    ];

    import "Nfs";
    import "Assert";

    DUMP("Nfs::Import");
    // ---------
    DUMP("- basic, SLE11-SP2");
    map entry1 = $[
                   "server_path": "data.example.com:/mirror",
                   "mount_point": "/mirror",
                   "nfs_options": "defaults"
                   ];
    
    TEST (``(
             Nfs::Import([ entry1 ])
             ), [READ, $[], $[]], nil);
    Assert::Equal(1, size(Nfs::nfs_entries));
    Assert::Equal("data.example.com:/mirror", Nfs::nfs_entries[0, "spec"]:"");

    DUMP("-- and Export");
    list e = Nfs::Export();
    Assert::Equal(2, size(e));
    Assert::Equal(true, haskey(e[0]:$[], "enable_nfs4"));
    Assert::Equal(true, haskey(e[0]:$[], "idmapd_domain"));
    Assert::Equal("data.example.com:/mirror", e[1, "server_path"]:"");
    Assert::Equal("/mirror",                  e[1, "mount_point"]:"");
    Assert::Equal("defaults",                 e[1, "nfs_options"]:"");

    // ---------
    DUMP("- empty");
    TEST (``(
             Nfs::Import([])
             ), [READ, $[], $[]], nil);
    Assert::Equal(0, size(Nfs::nfs_entries));

    // ---------
    DUMP("- invalid, missing basic data");
    map entry_invalid = $[
                   "server_path": "data.example.com:/mirror",
                   ];
    
    Nfs::Import([ entry_invalid ]);
    Assert::Equal(0, size(Nfs::nfs_entries));

    // ---------
    DUMP("- basic, SLE11-SP3");
    map global_options = $[
                           "enable_nfs4": true,
                           "idmapd_domain": "example.com"
                           ];
    TEST (``(
             Nfs::Import([
                 global_options,
                 entry1
                 ])
             ), [READ, $[], $[]], nil);
    Assert::Equal(true, Nfs::nfs4_enabled);
    Assert::Equal("example.com", Nfs::idmapd_domain);
    Assert::Equal(1, size(Nfs::nfs_entries));
    Assert::Equal("data.example.com:/mirror", Nfs::nfs_entries[0, "spec"]:"");

    DUMP("-- and Export");
    e = Nfs::Export();
    Assert::Equal(2, size(e));
    Assert::Equal(true,          e[0, "enable_nfs4"]:false);
    Assert::Equal("example.com", e[0, "idmapd_domain"]:"");
    Assert::Equal("data.example.com:/mirror", e[1, "server_path"]:"");
    Assert::Equal("/mirror",                  e[1, "mount_point"]:"");
    Assert::Equal("defaults",                 e[1, "nfs_options"]:"");

    // ---------
    DUMP("- NFSv4 via vfstype");
    map global_options2 = $[
                           "idmapd_domain": "example.com"
                           ];
    map entry2 = $[
                   "server_path": "data.example.com:/mirror",
                   "mount_point": "/mirror",
                   "nfs_options": "defaults",
                   "vfstype": "nfs4"
                   ];

    TEST (``(
             Nfs::Import([
                 global_options2,
                 entry2
                 ])
             ), [READ, $[], $[]], nil);

    Assert::Equal(true, Nfs::nfs4_enabled);
    Assert::Equal("example.com", Nfs::idmapd_domain);
    Assert::Equal(1, size(Nfs::nfs_entries));
    Assert::Equal("data.example.com:/mirror", Nfs::nfs_entries[0, "spec"]:"");

    DUMP("-- and Export");
    e = Nfs::Export();
    Assert::Equal(2, size(e));
    Assert::Equal(true,          e[0, "enable_nfs4"]:false);
    Assert::Equal("example.com", e[0, "idmapd_domain"]:"");
    Assert::Equal("data.example.com:/mirror", e[1, "server_path"]:"");
    Assert::Equal("/mirror",                  e[1, "mount_point"]:"");
    Assert::Equal("defaults",                 e[1, "nfs_options"]:"");

    // ---------
    DUMP("- with GSS");
    global_options = $[
                           "enable_nfs4": true,
                           "enable_nfs_gss": true,
                           "idmapd_domain": "example.com"
                           ];
    TEST (``(
             Nfs::Import([
                 global_options,
                 entry1
                 ])
             ), [READ, $[], $[]], nil);
    // assertions shortened
    Assert::Equal(true, Nfs::nfs_gss_enabled);
    Assert::Equal(1, size(Nfs::nfs_entries));
    Assert::Equal("data.example.com:/mirror", Nfs::nfs_entries[0, "spec"]:"");

    DUMP("-- and Export");
    e = Nfs::Export();
    Assert::Equal(2, size(e));
    Assert::Equal(true,          e[0, "enable_nfs_gss"]:false);
    Assert::Equal("data.example.com:/mirror", e[1, "server_path"]:"");
}
